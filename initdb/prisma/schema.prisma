generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  account       Account?
  session       Session?  @relation(fields: [id], references: [userId])
  books         Book[]    @relation(map: "readerId")

  @@map("users")
}

model Account {
  id                String   @id @default(cuid()) @unique
  userId            String   @map("user_id") @unique
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id") @unique
  sessionToken String   @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  users        User[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("session")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Book {
  id              String    @db.VarChar(255) @default(cuid()) @unique
  title           String    @db.VarChar(255)
  description     String?   @db.Text
  author          String    @db.VarChar(255)
  isbn            String    @db.Char(13) @unique
  addedAt         DateTime? @default(now()) @db.Timestamp(0)
  publicationDate DateTime  @default(now()) @db.Timestamp(0)
  readerId        String    @db.VarChar(255) @default("")
  user            User      @relation(fields: [readerId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "readerId")
}
